SO now what we have done 
1. we have our folder src 
    - in which we have a build a new folder MODELS
        - which will contain all the mongoose model of our app that is task and user
    - we have build a index,js file 
        - which will act like  the main file to build a post request from POSTMAN and serve it to the ROBO 3T 
2. mongodb.js is just for practice
3. mongoose.js will connect with index.js and serve the models
4. we have used express framework
5. we have  made playground dir in the taskmanager folder in hich we have practiced about the async functionand now 
    will be integrating that async function in the index.js
    if you want to visit the previous version go to github and see the commits history
6. now a new thing we have done is that we have made router folder in which all the router will be present that were
    in the index.js and from there we will access from the router folder
7. now here we have made some chnages in user.js model and applied the middleware technique of mongoose and set up
    our own schema . we have done this to basically  use the pre save feature in which we want to hash the password
    and also we have done changes in update pathc in user.js router here the previous code was directly connected with db
    so to tackle itwe have use the JS function atribute and save the user 
    while saving the user it will go through the model (user.js ) first and if password was changed so it will 
    easliy hash it
8. so here we have made a new routr that is for the login purpose and send the users in it 
     so basically we will be checking with th email and then with password in the user.js router
     and also a new type of method findbycred in the models user.js where we will verify the useremail and password
     using hash
9. now we have to decide that what should be public and privated basically means that what are the request that can user access 
    before login and after login so we will use the jsonwebtoken framework whihc generate a token for us to athenticate between diffreent request
    we will genarating new token while logiing in and signing in.
    these token will allow us to edit our data only and not another and these token are genrated from model user.js where we have made a new 
    method to genarate token
    also we have edited the schema of the mongoose basically and add a new onject of name token array which will conatin all the token genarated when login or signin
    genauthtoken() is the function method made in the mdoel user.js and here we ahave made a new token for the user that was provide
    in the user.js router call
10 . now we have set up the user models and token object n that model no we will proceed to the authentication thing
    we will crea5rtte a new fodler name middlware that will be responsible fo rcreating a new auth.jswhich
    is responsible for cheking that we are requsting for the user exist or not
    the middleware work that before printing the response
11. POTSMAN have been made automated in the login procedurre and suceefuuly aceesing the tokens
    if(pm.response.code===200){
    pm.environment.set('authtoken',pm.response.json().token) 
    }
    in the test script of login user changes updtaed and set the suthoristaion to br inherit from parent
12 . made 2 router logout and logoutall and set up that to return the toknen and delete the token value from token array
13 and after that the main thing we updated was getpublicprofile() in user model so that in poTSMAN during
    sending te response we dnot get the whole password hash and tokens array
    so we made this function and deleted the required object
14 and we just renamed the grtpublicprogile to (toJSON) and it also don't need to get called
    that's why we used it
15 OK so now we have to change the endpoints also as we only want the login user to update and delete the user
    so we ahve made changes in both the router by setting up the auth.js in them
16 hm till now we have integrate all of them with the login and the users now we will integrate the users with there task only
    1. we changed the task model and add upa new object named owner and add up the few things in it
     owner:{
        type:mongoose.Schema.Types.ObjectId,
        required:true,
        ref:'users'
    }
    this type is from mongoose and ref means that which model we are accessing and we type here the sam ename we wrote in the 
     // module.exports time
     2. after this we move to the task rouetr and integrate the auth.js in it
     in this we did like if any user will craete a new task a new object naem suerid thate use id (form the db)
     will also add to that JSON object
     3. when we will call the get request it will be helpful for us to use it and to differeitiate between the users tasks
     4. whiole reading all task of a single user we call the populate function that is usefull only when reading fromm the 
     uer mdoel (virtual) now hat is this virtual we setup a new method in user model about a virtual that will not reflect any database
     but it will connect one model that is tasks model with the user model via owner id 
     userschema.virtual('tasks',{
        ref:'tasks',
        localField:'_id', /like this
        foreignField:'owner'
    })
    5. in the get call form  the tasks we call a new way 
            await req.user.populate('tasks').execPopulate()
        res.send(req.user.tasks) and this will send all the task of the user (logged one only)
17 till now we have successfully made changes in get and post request and now we are going to make changes in the 
    upodate and delete also so in yupdate and delete we will add a line
    const task =await Task.findOne({_id :req.params.id,owner:req.user._id})
    this will fetch the task of that user with the help of its own id and its owner id and after that
    we can easliywork through it
18 one change we have done that we also add one more middleware in the user mdoel about the remove a users task after removing the user
    in user model
19 -------------------------------------------------------------------------------------------------------------
20 okk now stopping over here 